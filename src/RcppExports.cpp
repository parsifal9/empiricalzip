// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// f12
NumericVector f12(NumericVector x, double m);
RcppExport SEXP _empiricalzip_f12(SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(f12(x, m));
    return rcpp_result_gen;
END_RCPP
}
// gpdMixture
NumericVector gpdMixture(NumericVector x, double eta, double lambda, double theta);
RcppExport SEXP _empiricalzip_gpdMixture(SEXP xSEXP, SEXP etaSEXP, SEXP lambdaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gpdMixture(x, eta, lambda, theta));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _empiricalzip_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_empiricalzip_f12", (DL_FUNC) &_empiricalzip_f12, 2},
    {"_empiricalzip_gpdMixture", (DL_FUNC) &_empiricalzip_gpdMixture, 4},
    {"_empiricalzip_rcpp_hello_world", (DL_FUNC) &_empiricalzip_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_empiricalzip(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
